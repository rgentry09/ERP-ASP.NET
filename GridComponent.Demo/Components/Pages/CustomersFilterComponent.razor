@using GridBlazor.Resources
@using GridComponent.Demo.Services

@typeparam T

@if (visible)
{
    <div class="dropdown dropdown-menu grid-dropdown opened" style="display:block;">
        <div class="grid-dropdown-arrow"></div>
        <div class="grid-dropdown-inner">
            <div class="grid-popup-widget">
                <div class="form-group">
                    <p><i>This is custom filter widget demo</i></p>
                    <select class="grid-filter-type customerslist form-control" style="width:250px;" bind="filterValue">
                        @foreach (var customerName in customerService.GetCustomersNames())
                        {
                            <option value="@customerName">@customerName</option>
                        }
                    </select>
                </div>
                <div class="grid-filter-buttons">
                    <button type="button" class="btn btn-primary grid-apply" onclick="@ApplyButtonClicked">
                        @Strings.ApplyFilterButtonText
                    </button>
                </div>
            </div>
            <div class="grid-popup-additional">
                @if (_clearVisible)
                {
                    <ul class="menu-list">
                        <li>
                            <a class="grid-filter-clear" href="javascript:void(0);" onclick="@ClearButtonClicked">
                                @Strings.ClearFilterLabel
                            </a>
                        </li>
                    </ul>
                }
            </div>
        </div>
    </div>
}

@functions {
    private bool _clearVisible = false;

    [Inject] private CustomerService customerService { get; set; }

    [CascadingParameter(Name = "GridHeaderComponent")]
    private GridHeaderComponent<T> GridHeaderComponent { get; set; }

    [Parameter]
    protected bool visible { get; set; }

    [Parameter]
    protected string filterType { get; set; }

    [Parameter]
    protected string filterValue { get; set; }

    protected override void OnParametersSet()
    {
        _clearVisible = !string.IsNullOrWhiteSpace(filterValue);
    }

    protected async Task ApplyButtonClicked()
    {
        await GridHeaderComponent.AddFilter("1", filterValue);
    }

    protected async Task ClearButtonClicked()
    {
        await GridHeaderComponent.RemoveFilter();
    }
}
