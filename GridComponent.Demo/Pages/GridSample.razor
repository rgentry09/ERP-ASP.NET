@page "/gridsample"
@using GridBlazor
@using GridBlazor.Demo.Shared.Models
@using GridShared
@using GridShared.Filtering
@using GridShared.Sorting
@using GridShared.Utility
@using GridComponent.Demo.Services
@using Microsoft.Extensions.Primitives
@using System.Globalization
@inject IOrderService orderService

<h1>Grid Sample</h1>

<p>
    This component demonstrates a GridBlazor server-side grid. For more documentation, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-9">
            <GridComponent T="Order" Grid="@_grid" OnRowClicked="@OrderDetails"
                           CustomFilters="@_customFilters"></GridComponent>
        </div>
        <div class="col-md-3">
            <h4>
                Order details
            </h4>
            <OrderInfo Order="@_order"></OrderInfo>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@functions
{
    private const string companyNameFilter = "CompanyNameFilter";
    private CGrid<Order> _grid;
    private Task _task;
    private Order _order;
    private IQueryDictionary<Type> _customFilters = new QueryDictionary<Type>();

    protected override async Task OnInitAsync()
    {
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-page", "2");

        Action<IGridColumnCollection<Order>> columns = c =>
        {
        /* Adding not mapped column, that renders body, using inline Razor html helper */
            c.Add().Encoded(false).Sanitized(false).SetWidth(30).Css("hidden-xs") //hide on phones
                .RenderValueAs(o => $"<b><a class='modal_link' href='/Home/Edit/{o.OrderID}'>Edit</a></b>");

        /* Adding "OrderID" column: */
            c.Add(o => o.OrderID).Titled("Number").SetWidth(100);

        /* Adding "OrderDate" column: */
            c.Add(o => o.OrderDate, "OrderCustomDate").Titled("Date").SortInitialDirection(GridSortDirection.Descending)
                .SetCellCssClassesContraint(o => o.OrderDate.HasValue && o.OrderDate.Value >= DateTime.Parse("1997-01-01") ? "red" : "")
                .Format("{0:yyyy-MM-dd}").SetWidth(120)
                .Max(true).Min(true);

        /* Adding "CompanyName" column: */
            c.Add(o => o.Customer.CompanyName).Titled("Company").SetWidth(250).ThenSortByDescending(o => o.OrderID)
                .SetInitialFilter(GridFilterType.StartsWith, "a")
                .SetFilterWidgetType(companyNameFilter)
                .Max(true).Min(true);

        /* Adding "Freight" column: */
            c.Add(o => o.Freight)
                .Titled("Freight")
                .Format("{0:F}")
                .Sum(true).Average(true).Max(true).Min(true);

        /* Adding "Vip customer" column: */
            c.Add(o => o.Customer.IsVip).Titled("Is Vip").SetWidth(70).Css("hidden-xs") //hide on phones
                .RenderValueAs(o => o.Customer.IsVip ? "Yes" : "No");
        };

        //var locale = CultureInfo.CurrentCulture;
        var locale = new CultureInfo("fr-FR");
        
        var client = new GridClient<Order>(q => orderService.GetOrdersGridRows(columns, q), query, false,
            "ordersGrid", columns, locale)
            .SetRowCssClasses(item => item.Customer.IsVip ? "success" : string.Empty)
            .Sortable()
            .Filterable()
            .WithMultipleFilters()
            .Searchable(true, false)
            .WithGridItemsCount();

        //var client = new GridClient<Order>(q => orderService.GetOrdersGridRows(q), query, false,
        //    "ordersGrid", null, locale).AutoGenerateColumns();

        _customFilters.Add(companyNameFilter, typeof(CustomersFilterComponent<Order>));

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected void OrderDetails(object item)
    {
        if (item.GetType() == typeof(Order))
        {
            _order = (Order)item;
        }
        else
        {
            _order = null;
        }
        StateHasChanged();
    }
}

