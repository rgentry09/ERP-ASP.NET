@using GridBlazor.Resources
@using GridShared
@using GridShared.Columns
@using GridShared.Pagination

@typeparam T

@if (Grid != null && !Grid.ComponentOptions.RenderRowsOnly)
{
    if (Grid.PagingType != PagingType.Virtualization)
    {
        <tr class="grid-row"><td class="grid-cell" style="height:25px;border:none;background-color:white"></td></tr>
    }
    var firstColumn = (ITotalsColumn)Grid.Columns.FirstOrDefault();
    if (Grid.IsSumEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name="" style="width:36.5px;"></td>
            }
            @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if (firstColumn != null
              && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
              || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled || firstColumn.IsCalculationEnabled))
            {
                <td class="grid-cell" style="width:90px;"><b>@Strings.Sum</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ITotalsColumn)Grid.Columns.ElementAt(i);
                string cssStyles;
                if (((IGridColumn)column).Hidden)
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString() + " " + TdStyle;
                else
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString();
                if (Grid.Direction == GridDirection.RTL)
                    cssStyles = string.Concat(cssStyles, " text-align:right;direction:rtl;").Trim();
                if (!string.IsNullOrWhiteSpace(((IGridColumn)column).Width))
                    cssStyles = string.Concat(cssStyles, " width:", ((IGridColumn)column).Width, ";").Trim();
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled && !column.IsCalculationEnabled)
                {
                    <td class="grid-cell" style="@cssStyles"><b>@Strings.Sum</b></td>
                }
                else
                {
                    if (column.IsSumEnabled && column.SumValue != null)
                    {
                        <td class="grid-cell" style="@cssStyles"><b>@column.SumValue.GetString(column.ValuePattern)</b></td>
                    }
                    else
                    {
                        <td class="grid-cell" style="@cssStyles"></td>
                    }
                }

            }
        </tr>
    }
    if (Grid.IsAverageEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name="" style="width:36.5px;"></td>
            }
            @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if (firstColumn != null
              && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
              || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled || firstColumn.IsCalculationEnabled))
            {
                <td class="grid-cell" style="width:90px;"><b>@Strings.Average</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ITotalsColumn)Grid.Columns.ElementAt(i);
                string cssStyles;
                if (((IGridColumn)column).Hidden)
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString() + " " + TdStyle;
                else
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString();
                if (Grid.Direction == GridDirection.RTL)
                    cssStyles = string.Concat(cssStyles, " text-align:right;direction:rtl;").Trim();
                if (!string.IsNullOrWhiteSpace(((IGridColumn)column).Width))
                    cssStyles = string.Concat(cssStyles, " width:", ((IGridColumn)column).Width, ";").Trim();
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled && !column.IsCalculationEnabled)
                {
                    <td class="grid-cell" style="@cssStyles"><b>@Strings.Average</b></td>
                }
                else
                {
                    if (column.IsAverageEnabled && column.AverageValue != null)
                    {
                        <td class="grid-cell" style="@cssStyles"><b>@column.AverageValue.GetString(column.ValuePattern)</b></td>
                    }
                    else
                    {
                        <td class="grid-cell" style="@cssStyles"></td>
                    }
                }
            }
        </tr>
    }
    if (Grid.IsMaxEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name="" style="width:36.5px;"></td>
            }
            @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if (firstColumn != null
              && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
              || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled || firstColumn.IsCalculationEnabled))
            {
                <td class="grid-cell" style="width:90px;"><b>@Strings.Max</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ITotalsColumn)Grid.Columns.ElementAt(i);
                string cssStyles;
                if (((IGridColumn)column).Hidden)
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString() + " " + TdStyle;
                else
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString();
                if (Grid.Direction == GridDirection.RTL)
                    cssStyles = string.Concat(cssStyles, " text-align:right;direction:rtl;").Trim();
                if (!string.IsNullOrWhiteSpace(((IGridColumn)column).Width))
                    cssStyles = string.Concat(cssStyles, " width:", ((IGridColumn)column).Width, ";").Trim();
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled && !column.IsCalculationEnabled)
                {
                    <td class="grid-cell" style="@cssStyles"><b>@Strings.Max</b></td>
                }
                else
                {
                    if (column.IsMaxEnabled && column.MaxValue != null)
                    {
                        <td class="grid-cell" style="@cssStyles"><b>@column.MaxValue.GetString(column.ValuePattern)</b></td>
                    }
                    else
                    {
                        <td class="grid-cell" style="@cssStyles"></td>
                    }
                }
            }
        </tr>
    }
    if (Grid.IsMinEnabled)
    {
        <tr class="grid-totals-row">
            @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
            {
                <td class="grid-cell" data-name="" style="width:36.5px;"></td>
            }
            @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
            {
                <td class="grid-cell" data-name="" style="width:35px;"></td>
            }
            @if (firstColumn != null
              && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
              || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled || firstColumn.IsCalculationEnabled))
            {
                <td class="grid-cell" style="width:90px;"><b>@Strings.Min</b></td>
            }
            @for (int i = 0; i < Grid.Columns.Count(); i++)
            {
                var column = (ITotalsColumn)Grid.Columns.ElementAt(i);
                string cssStyles;
                if (((IGridColumn)column).Hidden)
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString() + " " + TdStyle;
                else
                    cssStyles = ((GridStyledColumn)column).GetCssStylesString();
                if (Grid.Direction == GridDirection.RTL)
                    cssStyles = string.Concat(cssStyles, " text-align:right;direction:rtl;").Trim();
                if (!string.IsNullOrWhiteSpace(((IGridColumn)column).Width))
                    cssStyles = string.Concat(cssStyles, " width:", ((IGridColumn)column).Width, ";").Trim();
                if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                   && !column.IsMaxEnabled && !column.IsMinEnabled && !column.IsCalculationEnabled)
                {
                    <td class="grid-cell" style="@cssStyles"><b>@Strings.Min</b></td>
                }
                else
                {
                    if (column.IsMinEnabled && column.MinValue != null)
                    {
                        <td class="grid-cell" style="@cssStyles"><b>@column.MinValue.GetString(column.ValuePattern)</b></td>
                    }
                    else
                    {
                        <td class="grid-cell" style="@cssStyles"></td>
                    }
                }
            }
        </tr>
    }
    if (Grid.IsCalculationEnabled)
    {
        foreach (var calculationName in Grid.Columns.SelectMany(r => ((ITotalsColumn)r).CalculationValues.Keys).Distinct())
        {
            <tr class="grid-totals-row">
                @if (Grid.SubGridKeys != null && Grid.SubGridKeys.Length > 0)
                {
                    <td class="grid-cell" data-name="" style="width:36.5px;"></td>
                }
                @if ((Grid.ReadEnabled || ((CGrid<T>)Grid).FuncReadEnabled != null) && !GridComponent.HeaderCrudButtons)
                {
                    <td class="grid-cell" data-name="" style="width:35px;"></td>
                }
                @if ((Grid.UpdateEnabled || ((CGrid<T>)Grid).FuncUpdateEnabled != null) && !GridComponent.HeaderCrudButtons)
                {
                    <td class="grid-cell" data-name="" style="width:35px;"></td>
                }
                @if ((Grid.DeleteEnabled || ((CGrid<T>)Grid).FuncDeleteEnabled != null) && !GridComponent.HeaderCrudButtons)
                {
                    <td class="grid-cell" data-name="" style="width:35px;"></td>
                }
                @if (firstColumn != null
                  && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                  || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled || firstColumn.IsCalculationEnabled))
                {
                    <td class="grid-cell" style="width:90px;"><b>@calculationName</b></td>
                }
                @for (int i = 0; i < Grid.Columns.Count(); i++)
                {
                    var column = (ITotalsColumn)Grid.Columns.ElementAt(i);
                    string cssStyles;
                    if (((IGridColumn)column).Hidden)
                        cssStyles = ((GridStyledColumn)column).GetCssStylesString() + " " + TdStyle;
                    else
                        cssStyles = ((GridStyledColumn)column).GetCssStylesString();
                    if (Grid.Direction == GridDirection.RTL)
                        cssStyles = string.Concat(cssStyles, " text-align:right;direction:rtl;").Trim();
                    if (!string.IsNullOrWhiteSpace(((IGridColumn)column).Width))
                        cssStyles = string.Concat(cssStyles, " width:", ((IGridColumn)column).Width, ";").Trim();
                    if (i == 0 && !column.IsSumEnabled && !column.IsAverageEnabled
                       && !column.IsMaxEnabled && !column.IsMinEnabled && !column.IsCalculationEnabled)
                    {
                        <td class="grid-cell" style="@cssStyles"><b>@calculationName</b></td>
                    }
                    else
                    {
                        if (column.IsCalculationEnabled && column.CalculationValues != null && column.CalculationValues.ContainsKey(calculationName))
                        {
                            <td class="grid-cell" style="@cssStyles"><b>@column.CalculationValues.Get(calculationName)?.GetString(column.ValuePattern)</b></td>
                        }
                        else
                        {
                            <td class="grid-cell" style="@cssStyles"></td>
                        }
                    }
                }
            </tr>   
        }
    }
}