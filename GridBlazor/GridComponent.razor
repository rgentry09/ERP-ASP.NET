@using GridBlazor.Filtering
@using GridBlazor.Pagination
@using GridBlazor.Sorting
@using GridShared.Columns

@typeparam T
@inherits GridComponentBase<T>

@if (Grid != null)
{
    if (Grid.ComponentOptions.RenderRowsOnly)
    {
        if (Grid.DisplayingItemsCount == 0)
        {
            <tr class="grid-empty-text">
                @if (_hasSubGrid)
                {
                    <td class="grid-cell" data-name=""></td>
                }
                @if (_requiredTotalsColumn)
                {
                    <td class="grid-cell" data-name=""></td>
                }
                <td colspan="@Grid.Columns.Count()">
                    @Grid.EmptyGridText
                </td>
            </tr>
        }
        else
        {
            @if (Grid.GroupingEnabled)
            {
                <GridGroupRowsComponent T="@T" Grid="@Grid" Values="@(new List<Tuple<string, object>>())" HasSubGrid="@_hasSubGrid" RequiredTotalsColumn="@_requiredTotalsColumn" ItemsToDisplay="@Grid.ItemsToDisplay" IsVisible="true"></GridGroupRowsComponent>
            }
            else
            {
                int i = 0;
                foreach (object item in Grid.ItemsToDisplay)
                {
                    int capturedI = i;
                    if (Grid.ComponentOptions.Selectable)
                    {
                        <tr class="grid-row@(SelectedRow == capturedI? " grid-row-selected" : "") @Grid.GetRowCssClasses(item)" @onclick="() => RowClicked(capturedI, item)">
                            @if (_hasSubGrid)
                            {
                                <td class="grid-cell grid-subgrid" data-is-rendered="false" data-is-visible="false" data-name="" @onclick="() => SubGridClicked(capturedI)">
                                    @if (IsSubGridVisible[capturedI])
                                    {
                                        <span class="subgrid-caret-down">&nbsp;</span>
                                    }
                                    else
                                    {
                                        <span class="subgrid-caret">&nbsp;</span>
                                    }
                                </td>
                            }
                            @if (_requiredTotalsColumn)
                            {
                                <td class="grid-cell" data-name=""></td>
                            }
                            @foreach (IGridColumn column in Grid.Columns)
                            {
                                <GridCellComponent T="@T" Column="@column" Item="@item"></GridCellComponent>
                            }
                        </tr>
                    }
                    else
                    {
                        <tr class="grid-row @Grid.GetRowCssClasses(item)">
                            @if (_hasSubGrid)
                            {
                                <td class="grid-cell grid-subgrid" data-is-rendered="false" data-is-visible="false" data-name="" @onclick="() => SubGridClicked(capturedI)">
                                    @if (IsSubGridVisible[capturedI])
                                    {
                                        <span class="subgrid-caret-down">&nbsp;</span>
                                    }
                                    else
                                    {
                                        <span class="subgrid-caret">&nbsp;</span>
                                    }
                                </td>
                            }
                            @if (_requiredTotalsColumn)
                            {
                                <td class="grid-cell" data-name=""></td>
                            }
                            @foreach (IGridColumn column in Grid.Columns)
                            {
                                <GridCellComponent T="@T" Column="@column" Item="@item"></GridCellComponent>
                            }
                        </tr>
                    }
                    if (_hasSubGrid)
                    {
                        int cols = 0;
                        cols++;
                        if (_requiredTotalsColumn)
                        {
                            cols++;
                        }
                        cols += Grid.Columns.Count() - 1;
                        var values = Grid.GetKeyValues(item);
                        <tr class="subgrid-row">
                            <CascadingValue Value=@this Name="GridComponent">
                                <SubGridComponent T="@T" GridPosition="@capturedI" Cols="@cols" Values="@values"></SubGridComponent>
                            </CascadingValue>
                        </tr>
                    }
                    i++;
                }
            }
        }
        if (_hasTotals)
        {
            <GridTotalsComponent Grid="@Grid"></GridTotalsComponent>
        }
    }
    else
    {
        <div class="grid-mvc" 
             data-lang="@Grid.Language" 
             data-gridname="@Grid.ComponentOptions.GridName" 
             data-selectable="@Grid.ComponentOptions.Selectable.ToString().ToLower()"
             data-extsortable="@Grid.ExtSortingEnabled.ToString().ToLower()"
             data-groupable="@Grid.GroupingEnabled.ToString().ToLower()" 
             data-multiplefilters="@Grid.ComponentOptions.AllowMultipleFilters.ToString().ToLower()">
            <div class="grid-wrap">
                @if (Grid.SearchingEnabled)
                {
                    <CascadingValue Value=@this Name="GridComponent">
                        <GridSearchComponent T="@T" Grid="@Grid"></GridSearchComponent>
                    </CascadingValue>
                }
                @if (Grid.ExtSortingEnabled)
                {
                    <CascadingValue Value=@this Name="GridComponent">
                        <GridExtSortHeaderComponent T="@T" Grid="@Grid"></GridExtSortHeaderComponent>
                    </CascadingValue>
                }
                <table class="table grid-table">
                    <thead>
                        <tr>
                            @if (_hasSubGrid)
                            {
                                <th class="grid-header" style="width:20px;"></th>
                            }
                            @if (_requiredTotalsColumn)
                            {
                                <th class="grid-header" style="width:60px;"></th>
                            }
                            @foreach (IGridColumn column in Grid.Columns)
                            {
                                <CascadingValue Value=@this Name="GridComponent">
                                    <GridHeaderComponent T="@T" Column="@column" FilterSettings="@((QueryStringFilterSettings)Grid.Settings.FilterSettings)" SortingSettings="@((QueryStringSortSettings)Grid.Settings.SortSettings)" Filters="@_filterComponents"></GridHeaderComponent>
                                </CascadingValue>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (Grid.DisplayingItemsCount == 0)
                        {
                            <tr class="grid-empty-text">
                                @if (_hasSubGrid)
                                {
                                    <td class="grid-cell" data-name=""></td>
                                }
                                @if (_requiredTotalsColumn)
                                {
                                    <td class="grid-cell" data-name=""></td>
                                }
                                <td colspan="@Grid.Columns.Count()">
                                    @Grid.EmptyGridText
                                </td>
                            </tr>
                        }
                        else
                        {
                            @if (Grid.GroupingEnabled)
                            {
                                <GridGroupRowsComponent T="@T" Grid="@Grid" Values="@(new List<Tuple<string, object>>())" HasSubGrid="@_hasSubGrid" RequiredTotalsColumn="@_requiredTotalsColumn" ItemsToDisplay="@Grid.ItemsToDisplay" IsVisible="true"></GridGroupRowsComponent>
                            }
                            else
                            {
                                int i = 0;
                                foreach (object item in Grid.ItemsToDisplay)
                                {
                                    int capturedI = i;
                                    if (Grid.ComponentOptions.Selectable)
                                    {
                                        <tr class="grid-row@(SelectedRow == capturedI? " grid-row-selected" : "") @Grid.GetRowCssClasses(item)" @onclick="() => RowClicked(capturedI, item)">
                                            @if (_hasSubGrid)
                                            {
                                                <td class="grid-cell grid-subgrid" data-is-rendered="false" data-is-visible="false" data-name="" @onclick="() => SubGridClicked(capturedI)">
                                                    @if (IsSubGridVisible[capturedI])
                                                    {
                                                        <span class="subgrid-caret-down">&nbsp;</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="subgrid-caret">&nbsp;</span>
                                                    }
                                                </td>
                                            }
                                            @if (_requiredTotalsColumn)
                                            {
                                                <td class="grid-cell" data-name=""></td>
                                            }
                                            @foreach (IGridColumn column in Grid.Columns)
                                            {
                                                <GridCellComponent T="@T" Column="@column" Item="@item"></GridCellComponent>
                                            }
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr class="grid-row @Grid.GetRowCssClasses(item)">
                                            @if (_hasSubGrid)
                                            {
                                                <td class="grid-cell grid-subgrid" data-is-rendered="false" data-is-visible="false" data-name="" @onclick="() => SubGridClicked(capturedI)">
                                                    @if (IsSubGridVisible[capturedI])
                                                    {
                                                        <span class="subgrid-caret-down">&nbsp;</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="subgrid-caret">&nbsp;</span>
                                                    }
                                                </td>
                                            }
                                            @if (_requiredTotalsColumn)
                                            {
                                                <td class="grid-cell" data-name=""></td>
                                            }
                                            @foreach (IGridColumn column in Grid.Columns)
                                            {
                                                <GridCellComponent T="@T" Column="@column" Item="@item"></GridCellComponent>
                                            }
                                        </tr>
                                    }
                                    if (_hasSubGrid)
                                    {
                                        int cols = 0;
                                        cols++;
                                        if (_requiredTotalsColumn)
                                        {
                                            cols++;
                                        }
                                        cols += Grid.Columns.Count() - 1;
                                        var values = Grid.GetKeyValues(item);
                                        <tr class="subgrid-row">
                                            <CascadingValue Value=@this Name="GridComponent">
                                                <SubGridComponent T="@T" GridPosition="@capturedI" Cols="@cols" Values="@values"></SubGridComponent>
                                            </CascadingValue>
                                        </tr>
                                    }
                                    i++;
                                }
                            }
                        }
                        @if (_hasTotals)
                        {
                            <GridTotalsComponent Grid="@Grid"></GridTotalsComponent>
                        }
                    </tbody>
                </table>
                <div class="grid-footer">
                    @if (Grid.ComponentOptions.ShowGridItemsCount)
                    {
                        <span class="grid-itemscount">
                            <span class="grid-itemscount-label">@Grid.ComponentOptions.GridCountDisplayName:</span>
                            <span class="grid-itemscount-caption"><b>@Grid.ItemsCount</b></span>
                        </span>
                    }
                    @if (Grid.EnablePaging && Grid.Pager != null)
                    {
                        <CascadingValue Value=@this Name="GridComponent">
                            <GridPagerComponent T="@T" GridPager="@((GridPager)Grid.Pager)"></GridPagerComponent>
                        </CascadingValue>
                    }
                </div>
            </div>
        </div>
    }
}