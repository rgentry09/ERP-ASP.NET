@using GridShared
@using GridShared.Filtering
@using GridShared.Sorting
@using GridShared.Utility
@using GridBlazor.Demo.Shared.Models
@using Microsoft.Extensions.Primitives
@using System
@using System.Globalization
@using System.Threading.Tasks
@page "/gridsample"
@page "/gridsample/{GridState}"
@inject IUriHelper UriHelper

<h1>Grid Sample</h1>

<p>
    This component demonstrates a GridBlazor client-side grid. For more documentation, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-9">
            <GridComponent @ref="_gridComponent" T="Order" Grid="@_grid" OnRowClicked="@OrderDetails"
                           CustomFilters="@_customFilters"></GridComponent>
        </div>
        <div class="col-md-3">
            <h4>
                Order details
            </h4>
            <OrderInfo Order="@_order" GridState="@_grid.GetState()"></OrderInfo>
        </div>
    </div>
    <div class="row">
        <button class="btn btn-secondary" @onclick="Refresh">Refresh</button>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private const string companyNameFilter = "CompanyNameFilter";
    private GridComponent<Order> _gridComponent;
    private CGrid<Order> _grid;
    private Task _task;
    private Order _order;
    private IQueryDictionary<Type> _customFilters = new QueryDictionary<Type>();

    [Parameter]
    internal string GridState { get; set; }

    public static Action<IGridColumnCollection<Order>> OrderColumns = c =>
    {
        /* Adding not mapped column, that renders body, using inline Razor html helper */
        c.Add().Encoded(false).Sanitized(false).SetWidth(30).Css("hidden-xs") //hide on phones
                                                                              //.RenderValueAs(o => $"<b><a class='modal_link' href='/Home/Edit/{o.OrderID}'>Edit</a></b>");
        .RenderComponentAs<ButtonCell>();

        /* Adding "OrderID" column: */
        c.Add(o => o.OrderID).Titled("Number").SetWidth(100);

        /* Adding "OrderDate" column: */
        c.Add(o => o.OrderDate, "OrderCustomDate").Titled("Date").SortInitialDirection(GridSortDirection.Descending)
        .SetCellCssClassesContraint(o => o.OrderDate.HasValue && o.OrderDate.Value >= DateTime.Parse("1997-01-01") ? "red" : "")
        .Format("{0:yyyy-MM-dd}").SetWidth(120)
        .Max(true).Min(true);

        /* Adding "CompanyName" column: */
        c.Add(o => o.Customer.CompanyName).Titled("Company").SetWidth(250).ThenSortByDescending(o => o.OrderID)
        .SetInitialFilter(GridFilterType.StartsWith, "a")
        .SetFilterWidgetType(companyNameFilter)
        .Max(true).Min(true);

        /* Adding "ContactName" column: */
        c.Add(o => o.Customer.ContactName).Titled("ContactName").SetWidth(250)
        .Max(true).Min(true);

        /* Adding "Freight" column: */
        c.Add(o => o.Freight)
        .Titled("Freight")
        .Format("{0:F}")
        .Sum(true).Average(true).Max(true).Min(true);


        /* Adding "Vip customer" column: */
        c.Add(o => o.Customer.IsVip).Titled("Is Vip").SetWidth(70).Css("hidden-xs") //hide on phones
        .RenderValueAs(o => o.Customer.IsVip ? "Yes" : "No");
    };

    public static Action<IGridColumnCollection<OrderDetail>> OrderDetailColumns = c =>
    {
        /* Adding "OrderID" column: */
        c.Add(o => o.OrderID)
            .Titled("Order Number")
            .SortInitialDirection(GridSortDirection.Descending)
            .SetWidth(100);

        /* Adding "ProductID" column: */
        c.Add(o => o.ProductID)
            .Titled("Product Number")
            .ThenSortByDescending(o => o.ProductID)
            .SetWidth(100);

        /* Adding "ProductName" column: */
        c.Add(o => o.Product.ProductName)
            .Titled("Product Name")
            .SetWidth(250);

        /* Adding "Quantity" column: */
        c.Add(o => o.Quantity)
            .Titled("Quantity")
            .SetCellCssClassesContraint(o => o.Quantity >= 50 ? "red" : "")
            .SetWidth(100)
            .Format("{0:F}");

        /* Adding "UnitPrice" column: */
        c.Add(o => o.UnitPrice)
            .Titled("Unit Price")
            .SetWidth(100)
            .Format("{0:F}");
    };

    protected override void OnInit()
    {
        CultureInfo.CurrentCulture = new CultureInfo("fr-FR");
    }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;

        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
            string subGridUrl = UriHelper.GetBaseUri() + $"api/SampleData/GetOrderDetailsGrid?OrderId={keys[0]}";
            var subGridQuery = new QueryDictionary<StringValues>();
            var subGridClient = new GridClient<OrderDetail>(subGridUrl, subGridQuery, false,
                "orderDetailsGrid" + keys[0].ToString(), OrderDetailColumns, locale)
                    .SetRowCssClasses(item => item.Quantity > 10 ? "success" : string.Empty)
                    .Sortable()
                    .Filterable()
                    .WithMultipleFilters()
                    .WithGridItemsCount();

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        var query = new QueryDictionary<StringValues>();
        if (!string.IsNullOrWhiteSpace(GridState))
        {
            try
            {
                query = StringExtensions.GetQuery(GridState);
            }
            catch (Exception)
            {
                // do nothing, GridState was not a valid state
            }
        }
        string url = UriHelper.GetBaseUri() + "api/SampleData/GetOrdersGridForSample";
        var client = new GridClient<Order>(url, query, false, "ordersGrid", OrderColumns, locale)
            .SetRowCssClasses(item => item.Customer.IsVip ? "success" : string.Empty)
            .Sortable()
            .Filterable()
            .WithMultipleFilters()
            .Searchable(true, false)
            .WithGridItemsCount()
            .SubGrid(subGrids, "OrderID");

        //string url = UriHelper.GetBaseUri() + "api/SampleData/GetOrdersAutoGenerateColumns";
        //var client = new GridClient<Order>(url, query, false, "ordersGrid", null, locale).AutoGenerateColumns();

        _customFilters.Add(companyNameFilter, typeof(CustomersFilterComponent<Order>));

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected void OrderDetails(object item)
    {
        if (item.GetType() == typeof(Order))
        {
            _order = (Order)item;
        }
        else
        {
            _order = null;
        }
        StateHasChanged();
    }

    private async Task Refresh()
    {
        await _gridComponent.UpdateGrid();
    }
}
