@using GridBlazor.Resources
@using GridBlazorServerSide.ColumnCollections
@using GridBlazorServerSide.Models
@using GridBlazorServerSide.Resources
@using GridBlazorServerSide.Services
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@inject ICustomerService customerService

<h3>Customers</h3>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-12">
            <GridComponent T="Customer" Grid="@_grid"></GridComponent>
        </div>
    </div>

    @if (_grid.Mode == GridMode.Grid)
    {
        <div class="row">
            <div class="col-md-5">
                <button type="button" class="btn btn-primary btn-md" @onclick="() => BackButtonClicked()">@Strings.Back</button>
            </div>
        </div>
    }
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Customer> _grid;
    private Task _task;
    private GridMode _mode;

    [CascadingParameter(Name = "GridComponent")]
    protected GridComponent<Order> GridComponent { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;

        var query = new QueryDictionary<StringValues>();

        var client = new GridClient<Customer>(q => customerService.GetCustomersGridRows(ColumnCollections.CustomerColumns, q),
            query, false, "customersGrid", ColumnCollections.CustomerColumns, locale)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .Crud(false, true, true, false, customerService)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .AddToOnAfterRender(OnAfterGridRender);

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected async Task OnAfterGridRender(GridComponent<Customer> gridComponent, bool firstRender)
    {
        if (gridComponent.Grid.Mode != _mode)
        {
            _mode = gridComponent.Grid.Mode;
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    protected async Task BackButtonClicked()
    {
        await GridComponent.Back();
    }
}
