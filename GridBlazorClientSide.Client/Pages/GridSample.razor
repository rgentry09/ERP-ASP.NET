@page "/gridsample"
@page "/gridsample/{GridState}"
@using GridBlazorClientSide.Client.ColumnCollections
@using GridBlazorClientSide.Shared.Models
@using Microsoft.Extensions.Primitives
@using System
@using System.Globalization
@using System.Threading.Tasks
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ICrudDataService<Order> orderService

<h1>Grid with all features</h1>

<p>
    This page contains a grid that has many features enabled: filtering, sorting, searching, subgrids, conditional styles on columns and rows, etc. It also allows order editing. Its grid state is passed to the edit page, so it can be returned to this page mantaining the grid state.
</p>

<p>
    This component demonstrates a GridBlazor client-side grid. For more information, please see: <a href="https://github.com/gustavnavar/Grid.Blazor">https://github.com/gustavnavar/Grid.Blazor</a>
</p>

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-md-9">
            <GridComponent T="Order" Grid="@_grid" OnRowClicked="@OrderDetails"
                           CustomFilters="@_customFilters"></GridComponent>
        </div>
        <div class="col-md-3">
            <h4>
                Order details
            </h4>
            <OrderInfo @ref="_orderInfo" ReturnUrl="gridsample" GridState="@_grid.GetState()"></OrderInfo>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Order> _grid;
    private Task _task;
    private OrderInfo _orderInfo;
    private IQueryDictionary<Type> _customFilters = new QueryDictionary<Type>();

    [Parameter]
    public string GridState { get; set; }

    protected override void OnInitialized()
    {
        CultureInfo.CurrentCulture = new CultureInfo(Startup.Culture);
    }

    protected override async Task OnParametersSetAsync()
    {
        var locale = CultureInfo.CurrentCulture;
        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
            string subGridUrl = NavigationManager.BaseUri + "api/SampleData/GetOrderDetailsGridAllFeatures?OrderId=";
            var subGridQuery = new QueryDictionary<StringValues>();
            var subGridClient = new GridClient<OrderDetail>(HttpClient, subGridUrl + keys[0], subGridQuery, false,
                "orderDetailsGrid" + keys[0].ToString(), ColumnCollections.OrderDetailColumnsAllFeatures, locale)
                    .SetRowCssClasses(item => item.Quantity > 10 ? "success" : string.Empty)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .WithMultipleFilters()
                    .WithGridItemsCount();

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        // build the column collection passing an action list with the action executed by the ButtonCell component
        Action<IGridColumnCollection<Order>> orderColumns = c =>
            ColumnCollections.OrderColumnsAllFeatures(c, NavigationManager.BaseUri);

        var query = new QueryDictionary<StringValues>();
        if (!string.IsNullOrWhiteSpace(GridState))
        {
            try
            {
                query = StringExtensions.GetQuery(GridState);
            }
            catch (Exception)
            {
                // do nothing, GridState was not a valid state
            }
        }
        string url = NavigationManager.BaseUri + "api/SampleData/GetOrdersGridAllFeatures";
        var client = new GridClient<Order>(HttpClient, url, query, false, "ordersGrid", orderColumns, locale)
            .SetRowCssClasses(item => item.Customer.IsVip ? "success" : string.Empty)
            .Sortable()
            .Filterable()
            .SetKeyboard(true)
            .Groupable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .Searchable(true, false)
            .Selectable(true, true, true)
            .WithGridItemsCount()
            .ChangePageSize(true)
            .SubGrid(subGrids, "OrderID")
            .Crud(true, orderService);

        _customFilters.Add(ColumnCollections.CompanyNameFilter, typeof(CustomersFilterComponent<Order>));

        _grid = client.Grid;
        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }

    protected void OrderDetails(object item)
    {
        if (item.GetType() == typeof(Order))
        {
            _orderInfo.Order = (Order)item;
        }
        else
        {
            _orderInfo.Order = null;
        }
        _orderInfo.Refresh();
    }
}
