@using GridCore
@using GridShared.Columns
@model ISGrid

@if (Model == null) { return; }

@{
    var firstColumn = (ITotalsColumn)Model.Columns.FirstOrDefault();
    bool hasSubGrid = Model.SubGridKeys != null && Model.SubGridKeys.Length > 0;
    bool hasTotals = Model.IsSumEnabled || Model.IsAverageEnabled || Model.IsMaxEnabled || Model.IsMinEnabled;
    bool requiredTotalsColumn = hasTotals
              && firstColumn != null
              && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                  || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled);
}

@if (await Model.GetDisplayingItemsCountAsync() == 0)
{
    <tr class="grid-empty-text">
        @if (hasSubGrid)
        {
            <td class="grid-cell" data-name=""></td>
        }
        @if (requiredTotalsColumn)
        {
            <td class="grid-cell" data-name=""></td>
        }
        <td colspan="@Model.Columns.Count()">
            @Model.EmptyGridText
        </td>
    </tr>
}
else
{
    @if (Model.GroupingEnabled)
    {
        var items = await Model.GetItemsToDisplayAsync();
        @await Html.PartialAsync("_GridGroupRows", new Tuple<ISGrid, IList<Tuple<string, object>>, bool, bool, IEnumerable<object>, string>
            (Model, new List<Tuple<string, object>>(), hasSubGrid, requiredTotalsColumn, items, "0"))
    }
    else
    {
        var items = await Model.GetItemsToDisplayAsync();
        foreach (object item in items)
        {
            <tr class="grid-row @Model.GetRowCssClasses(item)">
                @if (hasSubGrid)
                {
                    string values = "";
                    string[] keyValues = Model.GetSubGridKeyValues(item);
                    if (keyValues.Length == Model.SubGridKeys.Length)
                    {
                        values = string.Join(",", keyValues);
                    }
                    <td class="grid-cell grid-subgrid" data-is-rendered="false" data-is-visible="false" @(string.IsNullOrWhiteSpace(values) ? "" : "data-values=" + values) data-name="">
                        <span class="subgrid-caret">&nbsp;</span>
                    </td>
                }
                @if (requiredTotalsColumn)
                {
                    <td class="grid-cell" data-name=""></td>
                }
                @foreach (IGridColumn column in Model.Columns)
                {
                    @await Html.PartialAsync("_GridCell", new Tuple<IGridColumn, object>(column, item))
                }
            </tr>
            @if (hasSubGrid)
            {
                <tr class="subgrid-row" style="display:none;"></tr>
            }
        }
    }
}