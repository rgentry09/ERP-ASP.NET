@using GridMvc
@using GridMvc.Columns
@using GridShared.Columns
@using GridShared.Filtering
@model ISGrid

@if (Model == null) { return; }

@{
    var columns = Model.Columns.Where(r => r.InitialFilterSettings != ColumnFilterValue.Null).Select(r => r.Name);
    string initialFilters = "";
    if (columns != null)
    {
        initialFilters = string.Join(",", columns);
    }
    string keys = "";
    if (Model.Keys != null)
    {
        keys = string.Join(",", Model.Keys);
    }
    var firstColumn = (ISGridColumn)Model.Columns.FirstOrDefault();
    bool hasSubGrid = Model.Keys != null && Model.Keys.Length > 0;
    bool hasTotals = Model.IsSumEnabled || Model.IsAverageEnabled || Model.IsMaxEnabled || Model.IsMinEnabled;
    bool requiredTotalsColumn = hasTotals
              && firstColumn != null
              && (firstColumn.IsSumEnabled || firstColumn.IsAverageEnabled
                  || firstColumn.IsMaxEnabled || firstColumn.IsMinEnabled);
}

@if (Model.RenderOptions.RenderRowsOnly)
{
    @await Html.PartialAsync("_GridBody", Model)
}
else
{
    <div class="grid-mvc" data-lang="@Model.Language" data-gridname="@Model.RenderOptions.GridName" data-selectable="@Model.RenderOptions.Selectable.ToString().ToLower()" data-multiplefilters="@Model.RenderOptions.AllowMultipleFilters.ToString().ToLower()" data-initfilters="@initialFilters" @(string.IsNullOrWhiteSpace(keys) ? "" : "data-keys=" + keys)>
        <div class="grid-wrap">
            @if (Model.SearchingEnabled)
            {
                @await Html.PartialAsync("_GridSearch", Model)
            }
            <table class="table grid-table">
                @* Draw grid header *@
                <thead>
                    <tr>
                        @if (hasSubGrid)
                        {
                            <th class="grid-header" style="width:20px;"></th>
                        }
                        @if (requiredTotalsColumn)
                        {
                            <th class="grid-header" style="width:60px;"></th>
                        }
                        @foreach (IGridColumn column in Model.Columns)
                        {
                            @await Html.PartialAsync("_GridHeader", column)
                        }
                    </tr>
                </thead>
                <tbody>
                    @await Html.PartialAsync("_GridBody", Model)
                </tbody>
            </table>
            <div class="grid-footer">
                @if (Model.RenderOptions.ShowGridItemsCount)
                {
                    <span class="grid-itemscount">
                        <span class="grid-itemscount-label">@Model.RenderOptions.GridCountDisplayName:</span>
                        <span class="grid-itemscount-caption"><b>@Model.ItemsCount</b></span>
                    </span>
                }
                @if (Model.EnablePaging && Model.Pager != null)
                {
                    @await Html.PartialAsync(Model.Pager.TemplateName, Model.Pager)
                }
            </div>
        </div>
    </div>
}
